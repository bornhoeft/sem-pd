#N canvas 401 22 522 709 12;
#X msg 79 354 3 2 1;
#X msg 50 232 clear \, rule 1 2 3 2 \, rule 2 3 3 1 \, rule 3 2 1;
#X msg 72 322 1;
#X floatatom 124 382 5 0 0 0 - - -;
#X obj 50 408 s-lsystem 2;
#X text 44 19 s-lsystem is a Lindenmayer System implemented in Pd.
See Wikipedia for exactly what a Lindenmayer System is. Basically you
can set up rules (using the 'rule' message with a list) and then send
source data into the abstraction. The list elements of the source data
will be replaced by their corresponding rules (the first element of
the rule list corresponds to the element that will be replaced). e.g.
in this example \, 1 will be replaced by '2 3 2' because there is a
'rule 1 2 3 2'. The 'clear' message will clear all rules out. The argument
specifies the number of replacement iterations. Requires s-ireplace.
;
#X text 47 620 Generation 3: 2 1 2 1 2 3 2 3 3 1 2 3 2 2 1 2 1 2 3
2;
#X text 48 595 Generation 2: 3 3 1 2 1 3 3 1;
#X text 48 570 Generation 1: 2 3 2;
#X text 49 541 Initialwert 1:;
#X text 166 381 no. of generations;
#X text 43 670 [s-lsystem] abstraction by Chris McCormick;
#X msg 63 268 clear \, rule 1 -1 2 -1 \, rule 2 2 -3 1 \, rule 3 3
-1 2 \, rule -1 1 2 \, rule -3 1 1 -1;
#N canvas 411 583 270 223 collect 0;
#X obj 44 37 inlet;
#X obj 44 76 list prepend add2;
#X obj 44 110 list trim;
#X obj 44 160 outlet;
#X obj 176 40 inlet;
#X msg 176 108 set;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 4 0 5 0;
#X connect 5 0 3 0;
#X restore 50 463 pd collect;
#X msg 50 493 3 3 1 2 1 3 3 1;
#X obj 117 436 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text 144 429 clear message;
#X connect 0 0 4 0;
#X connect 1 0 4 0;
#X connect 2 0 4 0;
#X connect 3 0 4 1;
#X connect 4 0 13 0;
#X connect 12 0 4 0;
#X connect 13 0 14 0;
#X connect 15 0 13 1;
