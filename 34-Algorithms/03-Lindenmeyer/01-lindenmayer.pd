#N canvas 401 38 536 696 12;
#X declare -path abs;
#X msg 79 354 3 2 1;
#X msg 50 232 clear \, rule 1 2 3 2 \, rule 2 3 3 1 \, rule 3 2 1;
#X msg 72 322 1;
#X floatatom 124 381 5 1 5 0 - - - 0;
#X obj 50 408 s-lsystem 2;
#X text 46 606 Generation 3: 2 1 2 1 2 3 2 3 3 1 2 3 2 2 1 2 1 2 3 2;
#X text 47 581 Generation 2: 3 3 1 2 1 3 3 1;
#X text 47 556 Generation 1: 2 3 2;
#X text 48 527 Initialwert 1:;
#X text 165 380 no. of generations;
#X msg 63 268 clear \, rule 1 -1 2 -1 \, rule 2 2 -3 1 \, rule 3 3 -1 2 \, rule -1 1 2 \, rule -3 1 1 -1;
#N canvas 411 583 270 223 collect 1;
#X obj 44 37 inlet;
#X obj 44 76 list prepend add2;
#X obj 44 110 list trim;
#X obj 44 160 outlet;
#X obj 176 40 inlet;
#X msg 176 108 set;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 4 0 5 0;
#X connect 5 0 3 0;
#X restore 50 463 pd collect;
#X obj 117 442 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X text 140 439 clear message;
#X obj 341 340 declare -path abs;
#N canvas 324 362 366 91 credits 0;
#X text 20 27 [s-lsystem] abstraction by Chris McCormick;
#X restore 53 643 pd credits;
#N canvas 809 383 703 438 collection 0;
#X obj 88 57 inlet;
#X msg 88 86 2 1 2 1 2 3 2 3 3 1 2 1 3 3 1 2 1 2 1 2 3 2 3 3 1 2 1 3 3 1 2 1 2 1 2 3 2 3 3 1 2 3 2 2 1 2 1 2 3 2 3 3 1 2 3 2 3 3 1 2 3 2 3 3 1 2 1 3 3 1 2 1 2 1 2 3 2 3 3 1 2 3 2 2 1 2 1 2 3 2 2 1 2 1 2 3 2 3 3 1 2 1 3 3 1 2 1 2 1 2 3 2 3 3 1 2 1 3 3 1 2 1 2 1 2 3 2 3 3 1 2 3 2 2 1 2 1 2 3 2 2 1 2 1 2 3 2 3 3 1 2 1 3 3 1 2 1 2 1 2 3 2 3 3 1 2 1 3 3 1 2 1 2 1 2 3 2 3 3 1 2 3 2 2 1 2 1 2 3 2 3 3 1 2 3 2 3 3 1 2 3 2 3 3 1 2 1 3 3 1 2 1 2 1 2 3 2 3 3 1 2 3 2 2 1 2 1 2 3 2 2 1 2 1 2 3 2 3 3 1 2 1 3 3 1 2 1 2 1 2 3 2 3 3 1 2 1 3 3 1 2 1 2 1 2 3 2 3 3 1 2 3 2 2 1 2 1 2 3 2, f 79;
#X obj 88 324 outlet;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X restore 50 494 pd collection;
#X text 152 495 <---- SEE result last generation here.;
#X text 44 62 s-lsystem is a Lindenmayer System implemented in Pd. Basically you can set up rules (using the 'rule' message with a list) and then send source data into the abstraction. The list elements of the source data will be replaced by their corresponding rules (the first element of the rule list corresponds to the element that will be replaced). e.g. in this example \, 1 will be replaced by '2 3 2' because there is a 'rule 1 2 3 2'. The 'clear' message will clear all rules out. The argument specifies the number of replacement iterations. Requires s-ireplace.;
#N canvas 179 217 467 185 info 0;
#X obj 29 139 pdcontrol;
#X text 31 21 Online info:;
#X msg 33 53 browse https://en.wikipedia.org/wiki/L-system;
#X msg 62 95 browse https://fractalfoundation.org/OFC/OFC-2-4.html;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X restore 338 384 pd info;
#X text 43 28 Lindenmayer System;
#X connect 0 0 4 0;
#X connect 1 0 4 0;
#X connect 2 0 4 0;
#X connect 3 0 4 1;
#X connect 4 0 11 0;
#X connect 10 0 4 0;
#X connect 11 0 16 0;
#X connect 12 0 11 1;
