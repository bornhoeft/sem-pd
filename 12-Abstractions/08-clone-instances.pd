#N canvas 86 69 756 609 12;
#X obj 188 194 t b f;
#X obj 188 218 f;
#X obj 188 242 + 1;
#X obj 188 266 mod 16;
#X obj 188 290 pack;
#X msg 316 194 next \$1;
#X msg 316 262 this \$1;
#X msg 316 327 set \$1;
#X text 375 424 creation arguments:;
#X text 37 426 click to open ->;
#X text 26 445 (first copy only);
#X text 361 35 A list beginning with a number dispatches the rest of the list as a message, f 23;
#X text 387 195 "next" forwards a message to the next instance (incrementing and repeating circularly)., f 33;
#X text 377 263 "this" forwards a message to the previous instance sent to by "this" or "next", f 30;
#X text 372 327 "set" sets the "next"/"this" counter;
#X text 372 383 "all" broadcasts a message to all instances;
#N canvas 4 25 589 376 README 0;
#X text 60 32 clone - make multiple copies of a patch;
#X text 56 194 clone's inlets and outlets correspond to those of the contained patch \, and may be signal and/or control inlets and outlets. (In this example there's one control inlet and one signal outlet). You can click on the clone~ object to see the first of the created instances., f 72;
#X text 55 271 Signal inlets are copied to all the instances. Control inlets forward messages as shown below. Signal outlets output the sum of all instances' outputs \, and control outlets forward messages with the number of the instance prepended to them., f 67;
#X text 57 60 clone creates any number of copies of a desired abstraction (a patch loaded as an object in another patch). Within each copy \, "\$1" is set to the instance number. (These count from 0 unless overridden by the "-s" option in the creation arguments. You can avoid this behavior using the "-x" option.), f 71;
#X text 59 153 You can pass additional arguments to the copies that appear as \$2 and onward (or \$1 and onward with "-x" option)., f 71;
#X restore 252 38 pd README;
#X text 67 37 Cloning abstractions;
#X obj 188 517 dac~;
#X obj 199 320 print;
#X text 377 449 filename \; number of copies \; optional arguments to copies;
#X text 377 507 optional "-s #" to set starting voice number \; optional -x to avoid setting \$1 to voice number \;;
#X obj 560 48 loadbang;
#X obj 560 105 s init;
#X floatatom 317 238 5 40 80 0 - init - 0;
#X floatatom 316 301 5 40 80 0 - init - 0;
#X floatatom 315 361 5 40 80 0 - init - 0;
#X msg 560 78 60;
#X msg 315 385 all \$1;
#X obj 41 566 clone-subpatch 0;
#X obj 184 566 clone-subpatch 1;
#X obj 362 565 clone-subpatch 15;
#X obj 188 471 *~ 0.3;
#X text 329 565 ->;
#X obj 188 428 clone clone-subpatch 16;
#X msg 188 168 60 \, 64 \, 67;
#X obj 316 120 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#N canvas 92 130 450 300 random 0;
#X obj 166 39 inlet;
#X obj 166 63 metro 1000;
#X obj 166 87 random 50;
#X obj 166 111 + 40;
#X obj 166 135 outlet;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X restore 316 145 pd random midi;
#X floatatom 316 170 5 0 0 0 - - - 0;
#X text 359 171 random midi pitches;
#X connect 0 0 1 0;
#X connect 0 1 4 1;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 1 1;
#X connect 3 0 4 0;
#X connect 4 0 19 0;
#X connect 4 0 34 0;
#X connect 5 0 34 0;
#X connect 6 0 34 0;
#X connect 7 0 34 0;
#X connect 22 0 27 0;
#X connect 24 0 6 0;
#X connect 25 0 7 0;
#X connect 26 0 28 0;
#X connect 27 0 23 0;
#X connect 28 0 34 0;
#X connect 32 0 18 0;
#X connect 32 0 18 1;
#X connect 34 0 32 0;
#X connect 35 0 0 0;
#X connect 36 0 37 0;
#X connect 37 0 38 0;
#X connect 38 0 5 0;
