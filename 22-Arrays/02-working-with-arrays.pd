#N canvas 731 188 566 551 12;
#N canvas 0 22 452 302 (subpatch) 0;
#X array exampleArray 5 float 3;
#A 0 4.5 2.5 4 1 3;
#X coords 0 5 5 0 200 140 1 0 0;
#X restore 317 339 graph;
#N canvas 258 192 475 264 Setting_the_size_of_an_array 0;
#X floatatom 44 66 5 0 0 0 - - - 0;
#X text 15 65 2;
#X text 231 91 same as;
#X floatatom 305 66 5 0 0 0 - - - 0;
#X obj 305 114 s exampleArray;
#X msg 305 88 resize \$1;
#X text 19 158 Note that new elements always have a default value of zero when you make an array larger. Also note that if you make arrays smaller \, you may lose data as each element is deleted from the end of the array.;
#X text 16 18 1 The size (x-dimension) of an array can be set using the array's dialogue box. Or with a [send] message like below.;
#X msg 89 65 5;
#X msg 44 94 \; exampleArray resize \$1;
#X connect 0 0 9 0;
#X connect 3 0 5 0;
#X connect 5 0 4 0;
#X connect 8 0 9 0;
#X restore 27 291 pd Setting_the_size_of_an_array;
#N canvas 656 178 539 199 Getting_the_size_of_an_array 0;
#X text 15 11 GETTING THE SIZE OF AN ARRAY;
#X text 18 35 Having said that...PD arrays accept a "print" command which will output important array information to the terminal window. Like below:;
#X msg 24 90 \; exampleArray print;
#X obj 284 81 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X msg 284 105 print;
#X obj 284 134 s exampleArray;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X restore 27 344 pd Getting_the_size_of_an_array;
#X text 24 49 Arrays in Pd are different than the arrays in other languages primarily because \, in Pd \, they are designed to be displayed graphically on screen. This is due to the nature of audio synthesis - we want to see our wave forms and visually understand the data. That's why arrays in Pd are complicated by other objects like tables \, graphs and widgets. PD uses these objects to provide a graphic representation of the array data. If you're not interested in seeing the array data within your PD patch \, you can use the [table] object to store the array and corresponding table in a sub-window. Note that [table]s are more CPU friendly than their graphical counterpart.;
#X text 25 247 Like all programming languages \, Pd provides numerous tools to manipulate arrays and their data.;
#N canvas 159 152 511 294 Setting_a_constant_array_value 0;
#X floatatom 26 151 0 0 0 0 - - - 0;
#X obj 26 185 / 100;
#X msg 26 215 \; exampleArray const \$1;
#X text 18 16 SETTING A CONSTANT ARRAY VALUE;
#X text 27 46 By default \, all array element values are zero. However \, Pd allows you to change that using the "CONST" message.;
#X text 26 88 This feature is useful to reset all values in an array \, or with a little creativity can be used to "delete" a slice \, or create silence in audio samples.;
#X floatatom 305 162 5 0 0 0 - - - 0;
#X msg 305 196 const \$1;
#X obj 305 230 s exampleArray;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X restore 27 369 pd Setting_a_constant_array_value;
#N canvas 200 84 727 395 Higher_math_using_arrays 0;
#X text -7 12 HIGHER MATH USING ARRAYS;
#X text -3 226 Normalize;
#X text 78 227 (arg: renormer...a number by which all array values will be normalized);
#X msg 6 278 \; exampleArray normalize \$1;
#X floatatom 6 256 5 0 0 0 - - - 0;
#N canvas 94 347 710 432 sine_waves 0;
#X text 34 188 Sinesum;
#X text 98 190 (arg 1: Number of Points - arg 2: list of partial strengths);
#X msg 40 293 \; exampleArray sinesum 64 1 0 0.5 0 0.2 0 0.15;
#X msg 40 251 \; exampleArray sinesum 64 1 0.5 0.38 0.3 0.28 0.25 0.2;
#X msg 40 210 \; exampleArray sinesum 64 1;
#X text 26 7 SINE WAVES;
#X text 45 29 When the "sinesum" message is sent to the array \, Pd will want to know two things:;
#X text 58 65 1 How many samples (array elements) should be used? The higher the number is \, the higher the resolution of the wave form.;
#X text 58 122 2 What is the relative strength of each "partial" or "overtone" in the sound? For more info about this \, please lookup "overtones" or "harmonics" or "partials" on the internet.;
#X text 250 220 a pure sine wave!;
#X text 479 259 a triangle wave;
#X text 412 303 a square wave;
#X text 33 346 Note that these waves aren't exactly triangular or square...instead they are "smoothed" by the sinesum function to more accurately produce these wave forms as analog instruments do.;
#X restore 7 42 pd sine_waves;
#X text 141 26 Audio signals in a digital realm are created using a series of samples. It is digitally possible to create extremely angular wave forms using Pd arrays \, but the aural result is sometimes distorted and unpleasant. Hence \, higher math functions help our digital tools to produce data which can effectively be converted to analog signals similar to those of our electronic and mechanical predecessors. The first and one of the most important mathematic functions in digital synthesis is undoubtebly "sinesum". Pd provides an easy method for us to integrate these higher math functions in our arrays.;
#N canvas 353 695 750 302 cosine_waves 0;
#X text 11 22 Cosinesum;
#X text 91 22 (arg 1: Number of Points - arg 2: list of partial strengths);
#X text 273 84 pure cosine wave!;
#X msg 23 117 \; exampleArray cosinesum 64 0 -0.5 0 -0.2 0.1 0;
#X msg 24 76 \; exampleArray cosinesum 64 0 1;
#X msg 22 159 \; exampleArray cosinesum 64 -0.15 0.2 0.15 -0.15 0.1 0.1 0.2 -0.2 0.35 -0.25 -0.1 0.1 0.199;
#X restore 6 73 pd cosine_waves;
#X text 222 257 To normalize an audio signal means to alter the average amplitude of the signal. For the sake of clear \, undistored sounds \, Pd would like all of your audio signals to never exceed 1 or -1 The first step in achieving this is "normalization" \, but can be assisted by more drastic tools like compressors \, limiters \, gain multipliers \, etc.;
#X connect 4 0 3 0;
#X restore 26 398 pd Higher_math_using_arrays;
#N canvas 110 90 730 349 Files_and_arrays 0;
#X text 32 36 OTHER IMPORTANT STUFF;
#X obj 233 113 savepanel;
#X obj 233 92 bng 15 250 50 0 empty empty empty 0 -6 0 8 #fcfcfc #000000 #000000;
#X msg 233 139 \; exampleArray write \$1;
#X obj 483 92 bng 15 250 50 0 empty empty empty 0 -6 0 8 #fcfcfc #000000 #000000;
#X obj 483 111 openpanel;
#X msg 483 135 \; exampleArray read \$1;
#X text 34 51 Using text files can be helpful in saving or loading arrays in Pd. Note that the "read" message does not resize your array automatically.;
#X text 37 182 Audio files can be treated in similar ways by incorporating the [soundfiler] object. The soundfiler object provides Pd with tools to automatically resize arrays \, and read/write audio files in a variety of formats.;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X restore 26 424 pd Files_and_arrays;
#N canvas 191 160 791 624 Display_arrays 0;
#X text 16 19 Array graphs can be given "ticks" on both the x and y axis to help you visually measure your data. The tick messages require 3 values: (the index or value of the FIRST large tick \, then the interval between ticks \, then finally the number of ticks overall per large tick).;
#X msg 101 118 \; exampleArray xticks 0 5 3;
#X msg 100 166 \; exampleArray yticks 0 0.5 4;
#X text 21 224 Arrays can be given labels to describe the x and y axis. Give a y value and a bunch of x values or vice versa:;
#X text 273 549 this definetely makes more sense;
#X text 269 494 the coordinates of the bounds message are x and y (x+width y+height) \, where x/y are top-left coords !!);
#X msg 498 59 \; exampleArray xticks 1 0.25 4;
#X msg 497 100 \; exampleArray yticks 5 0.1 5;
#X msg 494 139 \; exampleArray ylabel -0.5 0 1 2 3 4 5;
#X msg 489 179 \; exampleArray xlabel -0.5 0 1 2 3 4 5;
#X msg 43 499 \; exampleArray bounds 0 0 5 5 \;;
#X msg 43 540 \; exampleArray bounds 0 5 5 0 \;;
#X msg 39 424 \; exampleArray bounds 0 2 6 -2;
#X msg 287 424 \; exampleArray bounds 0 1 6 -1;
#X obj 457 23 loadbang;
#X text 28 368 You can set the bounds (size) of the array: (the arguments are: low x \, high y \, high x \, low y);
#X msg 27 316 \; exampleArray ylabel 1 -2 -1.5 -1 0 1 1.5 2;
#X msg 30 268 \; exampleArray xlabel 0 1 2 3 4 5 6;
#X connect 14 0 6 0;
#X connect 14 0 7 0;
#X connect 14 0 8 0;
#X connect 14 0 9 0;
#X restore 25 478 pd Display_arrays;
#X text 26 22 Working with arrays;
#N canvas 86 53 529 613 write_and_change_arrays 0;
#X text 43 41 An array in Pd is primarily a storage device for numbers. The result is a series of numbers that you can do with whatever you wish...but how does one populate an array?;
#X text 40 544 Note that if your array is larger than your list \, then only the first elements will be effected. If your array is smaller than your list \, then your list will be truncated.;
#X text 41 98 Advanced techniques using text or audio files is described later \, but for now it's important to know that you can send an array a list. Each element in the list will be assigned to the corresponding element in the array. Note that the first position in an array is always zero!;
#X text 41 227 These messages below populate exampleArray on the parent patch with some values. The first element is the name of the array to populate. The second element is the position to start at. The rest of the elements are values to add to the array sequentially.;
#X text 41 183 first position in array = array[0];
#X text 41 199 second position in array = array[1];
#X text 42 436 To set values by message \, send a list whise first element gives the index to start at.;
#X text 164 510 This is the same with a normal send object;
#X floatatom 46 370 5 0 0 0 - - - 0;
#X msg 44 481 0 4.5 2.5 4 1 3;
#X msg 46 395 \; exampleArray \$1 1 4.5 2 4 2.5 \;;
#X obj 44 509 s exampleArray;
#X msg 45 326 \; exampleArray 0 0.5 3 1.5 4.2 2;
#X text 41 16 Write and change numbers in arrays;
#X msg 92 368 3;
#X connect 8 0 10 0;
#X connect 9 0 11 0;
#X connect 14 0 10 0;
#X restore 27 319 pd write_and_change_arrays;
#N canvas 200 387 660 261 Rename_arrays 0;
#X text 47 20 Arrays can be renamed:;
#X msg 50 136 \; exampleArray rename george;
#X msg 292 136 \; george rename exampleArray;
#X text 47 55 This is only temporal and the new name is not displayed! When the patch is reopened the old name will be used When the patch is saved with the new name than this new name is displayed when the patch is reopened.;
#X restore 25 506 pd Rename_arrays;
#N canvas 315 76 803 332 Audio_and_arrays 1;
#X text 61 43 Audio files can be treated in similar ways by incorporating the [soundfiler] object. The soundfiler object provides Pd with tools to automatically resize arrays \, and read/write audio files in a variety of formats.;
#X obj 62 222 soundfiler;
#X floatatom 62 252 10 0 0 1 length_in_samples - - 0;
#X obj 62 163 openpanel;
#X obj 62 138 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 300 224 soundfiler;
#X floatatom 301 250 10 0 0 1 length_in_samples - - 0;
#X obj 300 140 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 300 165 savepanel;
#X msg 62 192 read -resize \$1 sample;
#X msg 300 194 write -aiff \$1 sample;
#N canvas 0 22 454 304 (subpatch) 0;
#X array sample 155648 float 2;
#X coords 0 1 155648 -1 200 140 1 0 0;
#X restore 563 146 graph;
#X connect 1 0 2 0;
#X connect 3 0 9 0;
#X connect 4 0 3 0;
#X connect 5 0 6 0;
#X connect 7 0 8 0;
#X connect 8 0 10 0;
#X connect 9 0 1 0;
#X connect 10 0 5 0;
#X restore 28 450 pd Audio_and_arrays;
